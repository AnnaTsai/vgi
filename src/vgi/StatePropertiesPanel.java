package vgi;

import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxICell;
import com.mxgraph.util.mxConstants;
import com.mxgraph.util.mxUtils;
import com.mxgraph.view.mxGraph;
import java.awt.Color;
import java.util.Iterator;
import javax.swing.JComboBox;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * state_properties.java
 *
 * Created on 2012/1/6, 下午 03:53:38
 */
/**
 *
 * @author bl606
 */
public class StatePropertiesPanel extends javax.swing.JPanel {

    /** Creates new form state_properties */
    public StatePropertiesPanel(mxGraph graph, mxCell cell,
                         Automata automata, State state) {
        initComponents();
        
        this.graph = graph;
        this.cell = cell;
        this.automata = automata;
        this.state = state;
        style = cell.getStyle();
        
        showName();
        showTransition();
        showInitialWeight();
        showFinalWeight();
    }
    
    private void showName() {
        this.Name_TextField.setText(cell.getValue().toString());
    }
    
    private void showTransition() {
        String transitionStr = "";
        boolean self = false;
        int count = cell.getEdgeCount();
        
        for (int i=0; i<count; i++) {
            mxCell source = (mxCell)cell.getEdgeAt(i).getTerminal(true);
            mxCell target = (mxCell)cell.getEdgeAt(i).getTerminal(false);

            transitionStr += source.getId();
            transitionStr += " to ";
            transitionStr += target.getId();
            transitionStr += ", ";
            
            if ((source == target) && (source == cell)) {
                self = true;
            }
        }
        
        if (transitionStr.length() > 0)
            this.To_TextField.setText(transitionStr.substring(0, transitionStr.length()-2));
    }

    private void showInitialWeight() {
        if (state.getInitialWeight() != null)
            initialWeightTextField.setText(state.getInitialWeight().toString());
    }
    
    private void showFinalWeight() {
        if (state.getFinalWeight() != null)
            finalWeightTextField.setText(state.getFinalWeight().toString());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Name_label = new javax.swing.JLabel();
        transitionLabel = new javax.swing.JLabel();
        Iweight_label = new javax.swing.JLabel();
        Fweight_label = new javax.swing.JLabel();
        Style_label = new javax.swing.JLabel();
        Name_TextField = new javax.swing.JTextField();
        To_TextField = new javax.swing.JTextField();
        initialWeightTextField = new javax.swing.JTextField();
        finalWeightTextField = new javax.swing.JTextField();
        Style_ComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        Name_label.setText("Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(Name_label, gridBagConstraints);

        transitionLabel.setText("Transition :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(transitionLabel, gridBagConstraints);

        Iweight_label.setText("Initial weight :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(Iweight_label, gridBagConstraints);

        Fweight_label.setText("Final weight :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(Fweight_label, gridBagConstraints);

        Style_label.setText("Style :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(Style_label, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(Name_TextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(To_TextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(initialWeightTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(finalWeightTextField, gridBagConstraints);

        Style_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ELLIPSE", "RECTANGLE", "RHOMBUS", "CYLINDER", "ACTOR", "CLOUD", "TRIANGLE", "HEXAGON" }));
        Style_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Style_ComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        add(Style_ComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void Style_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Style_ComboBoxActionPerformed
// TODO add your handling code here:
    JComboBox cb = (JComboBox)evt.getSource();
    //Style = "shape=" + ((String)cb.getSelectedItem()).toLowerCase();
    Object[] objects = new Object[1];
    objects[0]=cell;
    System.out.print(style);
    graph.setCellStyles("shape",((String)cb.getSelectedItem()).toLowerCase() ,objects );
    
//    this.repaint();
//    System.out.println(_cell.getStyle());
}//GEN-LAST:event_Style_ComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fweight_label;
    private javax.swing.JLabel Iweight_label;
    private javax.swing.JTextField Name_TextField;
    private javax.swing.JLabel Name_label;
    private javax.swing.JComboBox Style_ComboBox;
    private javax.swing.JLabel Style_label;
    private javax.swing.JTextField To_TextField;
    private javax.swing.JTextField finalWeightTextField;
    private javax.swing.JTextField initialWeightTextField;
    private javax.swing.JLabel transitionLabel;
    // End of variables declaration//GEN-END:variables

    private String style;
    private mxCell cell;
    private mxGraph graph;
    private State state;
    private Automata automata;

    
    public void setFillColor(mxGraph graph,Color color){
        Object[] objects = new Object[1];
        objects[0]=cell;
        graph.setCellStyles("fillColor", mxUtils.hexString(color),objects);
        
    }
    public void setStrokeColor(mxGraph graph,Color color){
        Object[] objects = new Object[1];
        objects[0]=cell;
        graph.setCellStyles("strokeColor", mxUtils.hexString(color),objects);
        
    }
    public void setStrokeWidth(mxGraph graph,float width){
        Object[] objects = new Object[1];
        objects[0]=cell;
        String wid=String.valueOf(width);
        graph.setCellStyles("strokeWidth",wid,objects);
        
    }
    
    //fill cell with gradient color
    //fromColor-->toColor
    //direction: 1-north 2-south 3-east 4-west
    public void setGradientColor(mxGraph graph,Color fromColor, Color toColor,int direction)
    {
        Object[] objects = new Object[1];
        objects[0]=cell;
        graph.setCellStyles("fillColor", mxUtils.hexString(fromColor),objects);
        graph.setCellStyles("gradientColor", mxUtils.hexString(toColor),objects);
        switch(direction){
            case 1:
                graph.setCellStyles("gradientDirection",mxConstants.DIRECTION_NORTH,objects);
                break;
            case 2:
                graph.setCellStyles("gradientDirection",mxConstants.DIRECTION_SOUTH,objects);
                break;
            case 3:
                graph.setCellStyles("gradientDirection",mxConstants.DIRECTION_EAST,objects);
                break;
            case 4:
                graph.setCellStyles("gradientDirection",mxConstants.DIRECTION_WEST,objects);
                break;
                
        }
        
    }
    
    public void setShadow(mxGraph graph,boolean hasShadow)
    {
        Object[] objects = new Object[1];
        objects[0]=cell;
        if(hasShadow)
            graph.setCellStyles("shadow", "true",objects);
        else
            graph.setCellStyles("shadow", "false",objects);
    }
    
    //Global
    public void setShadowColor(Color color)
    {
        mxConstants.SHADOW_COLOR = color;
    }
    public void setShadowOffset(int offsetx,int offsety)
    {
      
        mxConstants.SHADOW_OFFSETX=offsetx;
        mxConstants.SHADOW_OFFSETY=offsety;
        
    }
    

}
