/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vgi.display;

import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import javax.swing.JTextField;
import vgi.geometrictools.Vector2D;
import vgi.automata.Automata;
import vgi.geometrictools.Projection;

/**
 *
 * @author reng
 */
public class ProjectionDialog extends javax.swing.JDialog {

    Automata automata;
    Projection projection;
    
    /**
     * Creates new form ProjectionDialog
     */
    public ProjectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public ProjectionDialog(Automata a){
        automata=a;
        projection=a.getProjection();
        initComponents();
        
        showData();
        
    }
    private void showData(){
        Point2D center=projection.getCenter();
        centerXTextField.setText(String.valueOf(center.getX()));
        centerYTextField.setText(String.valueOf(center.getY()));
        
        Vector2D ix=projection.getIx();
        ixXTextField.setText(String.valueOf(ix.getX()));
        ixYTextField.setText(String.valueOf(ix.getY()));
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        zoomInButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        centerXTextField = new javax.swing.JTextField();
        centerYTextField = new javax.swing.JTextField();
        downButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        ixXTextField = new javax.swing.JTextField();
        ixYTextField = new javax.swing.JTextField();
        centerLabel = new javax.swing.JLabel();
        ixLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(250, 269));
        setPreferredSize(new java.awt.Dimension(250, 269));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        zoomInButton.setText("+");
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(zoomInButton, gridBagConstraints);

        upButton.setText("↑");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(upButton, gridBagConstraints);

        zoomOutButton.setText("-");
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(zoomOutButton, gridBagConstraints);

        centerXTextField.setMinimumSize(new java.awt.Dimension(80, 28));
        centerXTextField.setPreferredSize(new java.awt.Dimension(80, 28));
        centerXTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                centerXTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(centerXTextField, gridBagConstraints);

        centerYTextField.setMinimumSize(new java.awt.Dimension(80, 28));
        centerYTextField.setPreferredSize(new java.awt.Dimension(80, 28));
        centerYTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                centerYTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(centerYTextField, gridBagConstraints);

        downButton.setText("↓");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(downButton, gridBagConstraints);

        leftButton.setText("←");
        leftButton.setMaximumSize(new java.awt.Dimension(80, 29));
        leftButton.setMinimumSize(new java.awt.Dimension(80, 29));
        leftButton.setPreferredSize(new java.awt.Dimension(80, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(leftButton, gridBagConstraints);

        rightButton.setText("→");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(rightButton, gridBagConstraints);

        ixXTextField.setMinimumSize(new java.awt.Dimension(80, 28));
        ixXTextField.setPreferredSize(new java.awt.Dimension(80, 28));
        ixXTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ixXTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(ixXTextField, gridBagConstraints);

        ixYTextField.setMinimumSize(new java.awt.Dimension(80, 28));
        ixYTextField.setPreferredSize(new java.awt.Dimension(80, 28));
        ixYTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ixYTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(ixYTextField, gridBagConstraints);

        centerLabel.setText("center");
        centerLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(centerLabel, gridBagConstraints);

        ixLabel.setText("ix");
        ixLabel.setMaximumSize(new java.awt.Dimension(80, 16));
        ixLabel.setMinimumSize(new java.awt.Dimension(80, 16));
        ixLabel.setPreferredSize(new java.awt.Dimension(80, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(ixLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
         Vector2D ix=projection.getIx();
         Vector2D i=ix.unitVector();
         double m=ix.getX()/i.getX();
         
         if(m>20) return;
         
         ix.setX(ix.getX()*(m+0.1));
         ix.setY(ix.getY()*(m+0.1));
         
         projection.setIx(ix);
         automata.setProjection(projection);
         showData();
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void centerXTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_centerXTextFieldKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String str=((JTextField)evt.getSource()).getText();
            if(str.compareTo("") == 0)  str = null;
            Double n=Double.valueOf(str);
            if(n!=null){
                Point2D center=projection.getCenter();
                center.setLocation(n,center.getY());
                
                projection.setCenter(center);
                automata.setProjection(projection);
                
            }
            showData();    
        }
    }//GEN-LAST:event_centerXTextFieldKeyPressed

    private void centerYTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_centerYTextFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String str=((JTextField)evt.getSource()).getText();
            if(str.compareTo("") == 0)  str = null;
            Double n=Double.valueOf(str);
            if(n!=null){
                Point2D center=projection.getCenter();
                center.setLocation(center.getX(),n);
                
                projection.setCenter(center);
                automata.setProjection(projection);
                
            }
            showData();    
        }
    }//GEN-LAST:event_centerYTextFieldKeyPressed

    private void ixXTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ixXTextFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String str=((JTextField)evt.getSource()).getText();
            if(str.compareTo("") == 0)  str = null;
            Double n=Double.valueOf(str);
            if(n!=null){
                Vector2D ix=projection.getIx();
                ix.setX(n);
                
                projection.setIx(ix);
                automata.setProjection(projection);
                
            } 
            showData();
        }
    }//GEN-LAST:event_ixXTextFieldKeyPressed

    private void ixYTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ixYTextFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String str=((JTextField)evt.getSource()).getText();
            if(str.compareTo("") == 0)  str = null;
            Double n=Double.valueOf(str);
            if(n!=null){
                Vector2D ix=projection.getIx();
                ix.setY(n);
                
                projection.setIx(ix);
                automata.setProjection(projection);
                
            }
            showData();
        }
    }//GEN-LAST:event_ixYTextFieldKeyPressed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
         Vector2D ix=projection.getIx();
         Vector2D i=ix.unitVector();
         double m=ix.getX()/i.getX();
         if(m>2){
            ix.setX(ix.getX()*(m-1));
            ix.setY(ix.getY()*(m-1));
         }else{
            if(m==0.1) return; 
            ix.setX(ix.getX()*(m-0.1));
            ix.setY(ix.getY()*(m-0.1));
         }
         projection.setIx(ix);
         automata.setProjection(projection);
         showData();
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ProjectionDialog dialog = new ProjectionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel centerLabel;
    private javax.swing.JTextField centerXTextField;
    private javax.swing.JTextField centerYTextField;
    private javax.swing.JButton downButton;
    private javax.swing.JLabel ixLabel;
    private javax.swing.JTextField ixXTextField;
    private javax.swing.JTextField ixYTextField;
    private javax.swing.JButton leftButton;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton upButton;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables
}
