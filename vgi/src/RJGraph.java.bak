/*
 * this class is used to extend jgraph functionalities to make it suitable
 * for vgi
 */

import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Hashtable;
import java.util.Map;


import org.jgraph.JGraph;
import org.jgraph.graph.GraphConstants;
import org.jgraph.graph.DefaultGraphModel;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.DefaultEdge;

import vgi.view.cellview.GPCellViewFactory;

import vgi.view.ui.MyUI;

/**
 * @author polar last MyUI 2008 12 21
 *         cwliu 
 */
public class RJGraph {

    JGraph graph;
    CanvasView view;
    Map stateIDToCell = new Hashtable();
    Map cellToStateID = new Hashtable();
    Map transIDToCell = new Hashtable();
    Map cellToTransID = new Hashtable();

    public RJGraph(CanvasView view) {
        graph = new JGraph(new DefaultGraphModel());
        graph.setInvokesStopCellEditing(true);
        graph.setAntiAliased(true);
        graph.getGraphLayoutCache().setFactory(new GPCellViewFactory());

        graph.setUI(new MyUI(this));
    //TODO initilize jgraph attributes
    }

    public JGraph getGraph() {
        return graph;
    }

    public int[][] getSelectedIDs() {
        Object[] cells = graph.getSelectionCells();

        if (cells.length == 0) {
            int[][] array = {{-1}, {-1}};
            return array;
        }
        //array[0] is states, array[1] is transitions
        int[][] array = new int[2][cells.length];
        //int[] stateArray = array[0];
        //int[] transArray = array[1];
        int stateCount = 0;
        int transCount = 0;

        for (int i = 0; i < cells.length; i++) {
            DefaultGraphCell curCell = (DefaultGraphCell) cells[i];
            if (curCell instanceof DefaultEdge) {
                //transArray[transCount] = (Integer) cellToTransID.get(curCell);
                array[1][transCount] = (Integer) cellToTransID.get(curCell);
                transCount++;
            } else if (!(curCell instanceof DefaultEdge)) { //cell is a state
                //stateArray[stateCount] = (Integer) cellToStateID.get(curCell);
                array[0][stateCount] = (Integer) cellToStateID.get(curCell);
                stateCount++;
            } else {
                System.out.print("error occured\n");
            }
        }

        int[] stateArray = new int[stateCount];
        int[] transArray = new int[transCount];
        for (int i = 0; i < stateArray.length; i++) {
            stateArray[i] = array[0][i];
        }
        for (int i = 0; i < transArray.length; i++) {
            transArray[i] = array[1][i];
        }
        array[0] = stateArray;
        array[1] = transArray;

        return array;
    }

    //TODO: obsolete?
    public int getStateID() {
        DefaultGraphCell selectedCell = (DefaultGraphCell) graph.getSelectionCell();
        if (selectedCell != null && !(selectedCell instanceof DefaultEdge)) {
            return (Integer) cellToStateID.get(selectedCell);
        } else {
            return -1;
        }
    }

    //TODO: obsolete?
    public int getTransID() {
        DefaultGraphCell selectedCell = (DefaultGraphCell) graph.getSelectionCell();
        if (selectedCell != null && selectedCell instanceof DefaultEdge) {
            return (Integer) cellToTransID.get(selectedCell);
        } else {
            return -1;
        }
    }

    public void insertState(int id, String name, Point2D p) {
        DefaultGraphCell state = new DefaultGraphCell(name);
        stateIDToCell.put(id, state);
        cellToStateID.put(state, id);

        String viewClass = "vgi.view.cellview.StateView";
        GPCellViewFactory.setViewClass(state.getAttributes(), viewClass);

        state.addPort();
        if (p != null) {
            GraphConstants.setBounds(state.getAttributes(),
                    new Rectangle2D.Double(p.getX(), p.getY(), 40, 40));
        } else {
            GraphConstants.setBounds(state.getAttributes(),
                    new Rectangle2D.Double(20, 20, 40, 40));
        }
        GraphConstants.setBorderColor(state.getAttributes(), Color.black);

        graph.getGraphLayoutCache().insert(state);
    }

    public void insertState(int id, String name, Point2D p, int stateType) {
        DefaultGraphCell state = new DefaultGraphCell(name);
        stateIDToCell.put(id, state);
        cellToStateID.put(state, id);

        String viewClass;
        switch (stateType) {
            case 0:
                viewClass = "vgi.view.cellview.InitialState";
                break;
            case 1:
                viewClass = "vgi.view.cellview.StateView";
                break;
            case 2:
                viewClass = "vgi.view.cellview.AcceptStateView";
                break;
            default:
                viewClass = "vgi.view.cellview.StateView";
                break;
        }
        GPCellViewFactory.setViewClass(state.getAttributes(), viewClass);

        state.addPort();
        if (p != null) {
            GraphConstants.setBounds(state.getAttributes(),
                    new Rectangle2D.Double(p.getX(), p.getY(), 40, 40));
        } else {
            GraphConstants.setBounds(state.getAttributes(),
                    new Rectangle2D.Double(20, 20, 40, 40));
        }
        GraphConstants.setBorderColor(state.getAttributes(), Color.black);

        graph.getGraphLayoutCache().insert(state);
    }

    public void changeStateStyle(int id, int stateType) {
        DefaultGraphCell state = (DefaultGraphCell) stateIDToCell.get(id);

        String viewClass;
        switch (stateType) {
            case 0:
                viewClass = "vgi.view.cellview.InitialState";
                break;
            case 1:
                viewClass = "vgi.view.cellview.StateView";
                break;
            case 2:
                viewClass = "vgi.view.cellview.AcceptStateView";
                break;
            default:
                viewClass = "vgi.view.cellview.StateView";
                break;
        }
        GPCellViewFactory.setViewClass(state.getAttributes(), viewClass);
    }

    public void insertTransition(int id, String name, int sourceID, int targetID) {
        DefaultEdge edge = new DefaultEdge(name);
        DefaultGraphCell sourceState = (DefaultGraphCell) stateIDToCell.get(sourceID);
        DefaultGraphCell targetState = (DefaultGraphCell) stateIDToCell.get(targetID);
        transIDToCell.put(id, edge);
        cellToTransID.put(edge, id);
        edge.setSource(sourceState.getChildAt(0));
        edge.setTarget(targetState.getChildAt(0));

        GraphConstants.setLabelAlongEdge(edge.getAttributes(), true);
        int arrow = GraphConstants.ARROW_CLASSIC;
        GraphConstants.setLineEnd(edge.getAttributes(), arrow);
        GraphConstants.setEndFill(edge.getAttributes(), true);
        GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_BEZIER);

        graph.getGraphLayoutCache().insert(edge);
    }

    //TODO: fix label positioning
    public void insertTransition(int id, String name, int sourceID, int targetID,
            int lineStyle, int labelHoriPos, int labelVertPos) {
        DefaultEdge edge = new DefaultEdge(name);
        DefaultGraphCell sourceState = (DefaultGraphCell) stateIDToCell.get(sourceID);
        DefaultGraphCell targetState = (DefaultGraphCell) stateIDToCell.get(targetID);
        transIDToCell.put(id, edge);
        cellToTransID.put(edge, id);
        edge.setSource(sourceState.getChildAt(0));
        edge.setTarget(targetState.getChildAt(0));

        GraphConstants.setLabelAlongEdge(edge.getAttributes(), true);
        int arrow = GraphConstants.ARROW_CLASSIC;
        GraphConstants.setLineEnd(edge.getAttributes(), arrow);
        GraphConstants.setEndFill(edge.getAttributes(), true);
        if (sourceID != targetID) {
            switch (lineStyle) {
                case 3:
                    GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_BEZIER);
                    break;
                case 4:
                    GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_ORTHOGONAL);
                    break;
                default:
                    GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_BEZIER);
                    break;
            }
        }
        graph.getGraphLayoutCache().insert(edge);
    }

    //TODO: add more handles
    public void changeTransitionStyle(int id, int lineType) {
        DefaultGraphCell edge = (DefaultGraphCell) transIDToCell.get(id);

        switch (lineType) {
            case 3:
                GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_BEZIER);
                break;
            case 4:
                GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_ORTHOGONAL);
                break;
            default:
                GraphConstants.setLineStyle(edge.getAttributes(), GraphConstants.STYLE_BEZIER);
                break;
        }
    }

    private void removeCell(Object[] cells) {
        cells = graph.getDescendants(cells);
        graph.getGraphLayoutCache().remove(cells);
    }

    public void removeState(int id) {
        Object state = stateIDToCell.get(id);
        stateIDToCell.remove(id);
        cellToStateID.remove(state);
        Object[] states = {state};
        removeCell(states);
    }

    public void removeTransition(int id) {
        Object transition = transIDToCell.get(id);
        transIDToCell.remove(id);
        cellToTransID.remove(transition);
        Object[] transitions = {transition};
        removeCell(transitions);
    }
}// end of class RJGraph

